{"version":3,"sources":["webpack:///./src/observables/allMove.ts","webpack:///./src/observables/misc.ts","webpack:///./src/observables/dnd.ts","webpack:///./src/observables/keyboardMove.ts","webpack:///./src/observables/resize.ts","webpack:///./src/observables/rotate.ts","webpack:///./src/observables/index.ts","webpack:///./src/observables/click.ts","webpack:///./src/Positionable.tsx"],"names":["allMoveStart$","Subject","allMoveEnd$","allMoveUpdate$","createAllMoveObservable","_ref","element","group","onComplete","_ref$shouldConvertToP","shouldConvertToPercent","pipe","switchMap","move$","takeUntil","filter","isMemberOfGroup","pluck","translateMovementToPosition","subscribe","complete","payload","observable$","map","addOffsets","offsetOfElement","distinctUntilChanged","convertOffsetToPercentOrPixels","parentElement","origin","change","left","top","displayName","__docgenInfo","description","props","defaultValue","name","required","type","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","documentMouseMove$","fromEvent","document","documentMouseUp$","keyDowns$","keyUps$","requestAnimationFramesUntil","until$","throttled$","interval","animationFrameScheduler","withLatestFrom","_","observed","shiftIsPressed$","merge","e","keyCode","x","y","startWith","createDndObservable","handle","snapTo","snapXTo","snapYTo","which","tap","preventDefault","stopPropagation","originalOffset","scale","scaleOfElement","snapValues","getSnapValues","changeFromPointToMouseEvent","clientX","clientY","skipWhile","hasntMovedFivePixels","adjustForSnap","notifyListeners","next","originX","originY","leftChange","topChange","shiftKey","changeRatio","absChangeRatio","Math","abs","sqrt","original","areBothSnapsUndefined","unsnappedOffset","snapped","snapPositionValues","offset","ARROW_KEY_DIRECTIONS","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","isArrowKey","Object","keys","indexOf","key","arrowDown$","arrowUp$","createKeyboardMoveObservable","repeat","keyRepeat$","timer","addToOffset","offsetAndSize","offsetAndSizeOfElement","sizeOfParent","sizeOfElement","onePercentHorizontal","width","onePercentVertical","height","movement","multiplier","createResizeObservable","right","bottom","oldOffsetAndSize","oldRotation","rotationOfElement","transformationMatrix","transformationMatrixOfElement","angleAndDistanceFromPointToMouseEvent","horizontalAndVerticalChange","applyToOriginalSize","limitToTwentyPxMinimum","lockAspectRatio","offsetForVisualConsistency","convertSizeToPercent","angle","angleBetweenPoints","distance","distanceBetweenPoints","angleAndDistanceChange","angleRadians","PI","cos","sin","position","_objectSpread","max","aspectRatio","_ref2","_ref3","_slicedToArray","newOffsetAndSize","changeX","changeY","oldCorners","visualCorners","newCorners","ne","sw","se","nw","parent","concat","round","offsetWidth","offsetHeight","createRotateObservable","getBoundingClientRect","axisX","axisY","angleFromAxis","currentRotation","initialAngle","rotate$","translateRotation","angleCalculator","rotation","createClickObservable","concatMap","mouseDownEvent","first","elementAt","mapTo","Positionable","_React$Component","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","refHandlers","container","React","dnd","neRotate","seRotate","swRotate","nwRotate","nResize","neResize","eResize","seResize","sResize","swResize","wResize","nwResize","destroy$","handleUpdate","onUpdate","objectsAreEqual","Positionable_objectSpread","_inherits","value","buildSubscriptions","prevProps","_this$props","rest","_objectWithoutProperties","prevPosition","prevRest","setState","_this$props2","children","render","passedProps","renderedPosition","isFunction","Error","_this2","_this$props3","disabled","disableKeyboardMovement","movable","onClick","resizable","rotatable","_this$state","randomString","current","includes","newCoords","calculateResizeObservableConfigs","forEach","config","refHandlerName","newPosition","calculateRotateObservableConfigs","newRotation","defaultProps"],"mappings":"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","file":"static/js/documentation-positionable~documentation-positionable-container.11560d68.js","sourcesContent":["import { Observable, Subject } from 'rxjs';\nimport {\n    distinctUntilChanged,\n    filter,\n    map,\n    pluck,\n    switchMap,\n    takeUntil,\n} from 'rxjs/operators';\n\nimport { Offset, OffsetNumbers } from '../types';\nimport { offsetOfElement } from '../utils/dom';\nimport { convertOffsetToPercentOrPixels } from '../utils/misc';\n\ninterface AllMoveObservableOptions {\n    // HTML element used as a basis for all calculations.\n    element: HTMLElement;\n\n    // Elements whose observables belong to the same\n    // group will respond to each others movements.\n    group: string;\n\n    // Function to call once a movement interaction has completed.\n    onComplete?: () => void;\n\n    // Should px-based measurements be converted to a % of the parent size.\n    shouldConvertToPercent?: boolean;\n}\n\ninterface AllMovePayload {\n    group: string;\n    offset: OffsetNumbers;\n}\n\nexport const allMoveStart$ = new Subject<any>();\nexport const allMoveEnd$ = new Subject<any>();\nexport const allMoveUpdate$ = new Subject<AllMovePayload>();\n\nexport const createAllMoveObservable = ({\n    element,\n    group,\n    onComplete,\n    shouldConvertToPercent = true,\n}: AllMoveObservableOptions): Observable<Offset> =>\n    allMoveStart$.pipe(\n        switchMap(() => {\n            const move$ = allMoveUpdate$.pipe(\n                takeUntil(allMoveEnd$),\n                filter(isMemberOfGroup(group)),\n                pluck('offset'),\n                translateMovementToPosition(element, shouldConvertToPercent)\n            );\n\n            move$.subscribe({\n                complete: () => onComplete && onComplete(),\n            });\n\n            return move$;\n        })\n    );\n\n/**\n * Do the payload group and observable group match?\n */\nconst isMemberOfGroup = (group: string) => (payload: AllMovePayload) =>\n    payload.group === group;\n\nconst translateMovementToPosition = (\n    element: HTMLElement,\n    shouldConvertToPercent: boolean\n) => (observable$: Observable<OffsetNumbers>) =>\n    observable$.pipe(\n        map(addOffsets(offsetOfElement(element))),\n        distinctUntilChanged(),\n        map(\n            convertOffsetToPercentOrPixels(\n                shouldConvertToPercent,\n                element.parentElement!\n            )\n        )\n    );\n\n/**\n * Add the change in mouse position to an origin point.\n */\nconst addOffsets = (origin: OffsetNumbers) => (change: OffsetNumbers) => ({\n    left: origin.left + change.left,\n    top: origin.top + change.top,\n});\ntry {\n    // @ts-ignore\n    createAllMoveObservable.displayName = \"createAllMoveObservable\";\n    // @ts-ignore\n    createAllMoveObservable.__docgenInfo = { \"description\": \"\", \"displayName\": \"createAllMoveObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"group\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"group\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"shouldConvertToPercent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shouldConvertToPercent\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/allMove.ts#createAllMoveObservable\"] = { docgenInfo: createAllMoveObservable.__docgenInfo, name: \"createAllMoveObservable\", path: \"src/observables/allMove.ts#createAllMoveObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { animationFrameScheduler, fromEvent, interval, Observable } from 'rxjs';\nimport {\n    distinctUntilChanged,\n    filter,\n    map,\n    merge,\n    startWith,\n    takeUntil,\n    withLatestFrom,\n} from 'rxjs/operators';\n\nexport const documentMouseMove$ = fromEvent<MouseEvent>(document, 'mousemove');\nexport const documentMouseUp$ = fromEvent<MouseEvent>(document, 'mouseup');\n\nexport const keyDowns$ = fromEvent<KeyboardEvent>(document, 'keydown');\nexport const keyUps$ = fromEvent<KeyboardEvent>(document, 'keyup');\n\n/**\n * Throttle an Observable to available animation\n * frames until a second Observable omits a value.\n *\n * @param observable$ Observable to monitor\n * @param until$ Observable that triggers an end to monitoring\n * @param onComplete Callback function that signals monitoring has ending\n */\nexport const requestAnimationFramesUntil = (\n    observable$: Observable<any>,\n    until$: Observable<any>,\n    onComplete?: () => void\n) => {\n    const animationFrame$ = interval(0, animationFrameScheduler);\n\n    const throttled$ = animationFrame$.pipe(\n        withLatestFrom(observable$, (_, observed) => observed),\n        takeUntil(until$)\n    );\n\n    throttled$.subscribe({\n        complete: () => onComplete && onComplete(),\n    });\n\n    return throttled$;\n};\n\n/**\n * Is the KeyboardEvent for a key down?\n */\nconst isKeydown = (e: KeyboardEvent) => e.type === 'keydown';\n\n/**\n * Has the pressed state of a key changed between two events?\n */\nconst pressedStateHasChanged = (x: KeyboardEvent, y: KeyboardEvent) =>\n    x.type === y.type;\n\n/**\n * Observable of whether shift is currently being held down.\n */\nconst SHIFT_KEY_CODE = 16;\nexport const shiftIsPressed$: Observable<boolean> = keyDowns$.pipe(\n    merge(keyUps$),\n    filter(e => e.keyCode === SHIFT_KEY_CODE),\n    distinctUntilChanged(pressedStateHasChanged),\n    map(isKeydown),\n    startWith(false)\n);\ntry {\n    // @ts-ignore\n    requestAnimationFramesUntil.displayName = \"requestAnimationFramesUntil\";\n    // @ts-ignore\n    requestAnimationFramesUntil.__docgenInfo = { \"description\": \"Throttle an Observable to available animation\\nframes until a second Observable omits a value.\\n@param observable$ Observable to monitor\\n@param until$ Observable that triggers an end to monitoring\\n@param onComplete Callback function that signals monitoring has ending\", \"displayName\": \"requestAnimationFramesUntil\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/misc.ts#requestAnimationFramesUntil\"] = { docgenInfo: requestAnimationFramesUntil.__docgenInfo, name: \"requestAnimationFramesUntil\", path: \"src/observables/misc.ts#requestAnimationFramesUntil\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { fromEvent, Observable } from 'rxjs';\nimport { filter, map, skipWhile, switchMap, tap } from 'rxjs/operators';\n\nimport { Offset, OffsetNumbers } from '../types';\nimport { offsetOfElement, scaleOfElement } from '../utils/dom';\nimport {\n    areBothSnapsUndefined,\n    getSnapValues,\n    snapPositionValues,\n    SnapValues,\n} from '../utils/misc';\nimport { allMoveEnd$, allMoveStart$, allMoveUpdate$ } from './allMove';\nimport {\n    documentMouseMove$,\n    documentMouseUp$,\n    requestAnimationFramesUntil,\n} from './misc';\n\ninterface DndObservableOptions {\n    // HTML element used as a basis for all calculations.\n    element: HTMLElement;\n\n    // Elements whose observables belong to the same\n    // group will respond to each others movements.\n    group: string;\n\n    // HTML element used as a target for mouse interactions.\n    handle: HTMLElement;\n\n    // Round position values to an interval of this number.\n    snapTo?: number;\n\n    // Round `left` value to an interval of this number.\n    snapXTo?: number;\n\n    // Round `top` value to an interval of this number.\n    snapYTo?: number;\n}\n\n/**\n * Create an Obvservable that enables dragging an Element\n * and emits a stream of updated positions.\n */\nexport const createDndObservable = ({\n    element,\n    group,\n    handle,\n    snapTo,\n    snapXTo,\n    snapYTo,\n}: DndObservableOptions): Observable<Offset> => {\n    const mouseDown$ = fromEvent<MouseEvent>(handle, 'mousedown');\n\n    return mouseDown$.pipe(\n        filter((e: MouseEvent) => e.which === 1), // left clicks only\n        tap(allMoveStart$),\n        switchMap((e: MouseEvent) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const originalOffset = offsetOfElement(element);\n\n            // Account for CSS transform scale\n            const scale = scaleOfElement(element);\n\n            // consolidate snap values from snapTo, snapXTo, snapYTo\n            const snapValues = getSnapValues(snapTo, snapXTo, snapYTo);\n\n            const move$ = documentMouseMove$.pipe(\n                map(changeFromPointToMouseEvent(e.clientX, e.clientY, scale)),\n                skipWhile(hasntMovedFivePixels),\n                map(adjustForSnap(originalOffset, snapValues)),\n                tap(notifyListeners(group))\n            );\n\n            return requestAnimationFramesUntil(move$, documentMouseUp$, () =>\n                allMoveEnd$.next()\n            );\n        })\n    );\n};\n\n/**\n * Calculates the distance from an origin point to a mouse event\n */\nconst changeFromPointToMouseEvent = (\n    originX: number,\n    originY: number,\n    scale: number\n) => (e: MouseEvent): OffsetNumbers => {\n    const leftChange = (e.clientX - originX) / scale;\n    const topChange = (e.clientY - originY) / scale;\n\n    if (!e.shiftKey) {\n        return {\n            left: leftChange,\n            top: topChange,\n        };\n    }\n\n    const changeRatio = leftChange / topChange;\n    const absChangeRatio = Math.abs(changeRatio);\n\n    // Lock to diagonals\n    if (0.333 < absChangeRatio && absChangeRatio < 3) {\n        return {\n            left: leftChange,\n            top: topChange / leftChange > 0 ? leftChange : leftChange * -1,\n        };\n    }\n\n    // Lock to horizontal\n    if (Math.abs(leftChange) > Math.abs(topChange)) {\n        return {\n            left: leftChange,\n            top: 0,\n        };\n    }\n\n    // Lock to vertical\n    return {\n        left: 0,\n        top: topChange,\n    };\n};\n\n/**\n * Determine if the mouse has moved 5 pixels or more in any direction.\n * Change = √(a² + b²)\n */\nconst hasntMovedFivePixels = (change: OffsetNumbers) =>\n    Math.sqrt(change.top * change.top + change.left * change.left) < 5;\n\n/**\n * Adjusts the offset changes so that the element that is being moved\n * ends up in a position that is snapped to the given number.\n *\n * NOTE: If you have grouped elements (via the `group` param),\n * only the element that is being interacted with via mouse\n * will snap, with all other elements simply following along.\n */\nconst adjustForSnap = (original: OffsetNumbers, snapValues: SnapValues) => (\n    change: OffsetNumbers\n): OffsetNumbers => {\n    if (areBothSnapsUndefined(snapValues)) {\n        return change;\n    }\n\n    const unsnappedOffset: OffsetNumbers = {\n        left: original.left + change.left,\n        top: original.top + change.top,\n    };\n\n    const snapped = snapPositionValues(snapValues)(unsnappedOffset);\n\n    const adjustedChange = {\n        left: snapped.left - original.left,\n        top: snapped.top - original.top,\n    };\n\n    return adjustedChange;\n};\n\n/**\n * Notify allMove observers that a change in mouse position\n * has occurred relative to the initial mouse-down offset.\n */\nconst notifyListeners = (group: string) => (offset: OffsetNumbers) =>\n    allMoveUpdate$.next({ group, offset });\ntry {\n    // @ts-ignore\n    createDndObservable.displayName = \"createDndObservable\";\n    // @ts-ignore\n    createDndObservable.__docgenInfo = { \"description\": \"Create an Obvservable that enables dragging an Element\\nand emits a stream of updated positions.\", \"displayName\": \"createDndObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"group\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"group\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"handle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"handle\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"snapTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapXTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapXTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapYTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapYTo\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/dnd.ts#createDndObservable\"] = { docgenInfo: createDndObservable.__docgenInfo, name: \"createDndObservable\", path: \"src/observables/dnd.ts#createDndObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { timer } from 'rxjs';\nimport { filter, map, switchMap, takeUntil } from 'rxjs/operators';\n\nimport { OffsetNumbers } from '../types';\nimport { offsetAndSizeOfElement, sizeOfElement } from '../utils/dom';\nimport { convertOffsetToPercentOrPixels } from '../utils/misc';\nimport { keyDowns$, keyUps$ } from './misc';\n\ninterface KeyboardMoveObservableOptions {\n    element: HTMLElement;\n    onComplete?: () => void;\n    shouldConvertToPercent: boolean;\n}\n\n// These keyboard keys result in these movements.\nconst ARROW_KEY_DIRECTIONS: { [index: string]: OffsetNumbers } = {\n    ArrowLeft: { left: -1, top: 0 },\n    ArrowRight: { left: 1, top: 0 },\n    ArrowUp: { left: 0, top: -1 },\n    ArrowDown: { left: 0, top: 1 },\n};\n\nconst isArrowKey = (e: KeyboardEvent) =>\n    Object.keys(ARROW_KEY_DIRECTIONS).indexOf(e.key) !== -1;\n\nconst arrowDown$ = keyDowns$.pipe(filter(isArrowKey));\nconst arrowUp$ = keyUps$.pipe(filter(isArrowKey));\n\n/**\n * Create an Observable that enables drag-and-drop\n * and emits a stream of updated positions.\n */\nexport const createKeyboardMoveObservable = ({\n    element,\n    onComplete,\n    shouldConvertToPercent = true,\n}: KeyboardMoveObservableOptions) =>\n    arrowDown$.pipe(\n        // We're custom-handling repeating with a timer observable\n        filter(e => !e.repeat),\n\n        // Repeat until keyup\n        switchMap(e => {\n            const keyRepeat$ = timer(0, 200).pipe(\n                takeUntil(arrowUp$),\n                map(addToOffset(e, element)),\n                map(\n                    convertOffsetToPercentOrPixels(\n                        shouldConvertToPercent,\n                        element.parentElement!\n                    )\n                )\n            );\n\n            keyRepeat$.subscribe({\n                complete: () => onComplete && onComplete(),\n            });\n\n            return keyRepeat$;\n        })\n    );\n\n/*\n * Adds 1% (10% if shift is pressed) to the offset of an HTML Element\n * in the direction of the currently-pressed arrow key.\n *\n */\nexport const addToOffset = (\n    e: KeyboardEvent,\n    element: HTMLElement\n) => (): OffsetNumbers => {\n    const offsetAndSize = offsetAndSizeOfElement(element);\n    const sizeOfParent = sizeOfElement(element.parentElement!);\n    const onePercentHorizontal = sizeOfParent.width * 0.01;\n    const onePercentVertical = sizeOfParent.height * 0.01;\n\n    const movement = ARROW_KEY_DIRECTIONS[e.key];\n    const multiplier = e.shiftKey ? 5 : 1;\n\n    return {\n        left:\n            onePercentHorizontal * movement.left * multiplier +\n            offsetAndSize.left,\n        top: onePercentVertical * movement.top * multiplier + offsetAndSize.top,\n    };\n};\ntry {\n    // @ts-ignore\n    createKeyboardMoveObservable.displayName = \"createKeyboardMoveObservable\";\n    // @ts-ignore\n    createKeyboardMoveObservable.__docgenInfo = { \"description\": \"Create an Observable that enables drag-and-drop\\nand emits a stream of updated positions.\", \"displayName\": \"createKeyboardMoveObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"shouldConvertToPercent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shouldConvertToPercent\", \"required\": true, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/keyboardMove.ts#createKeyboardMoveObservable\"] = { docgenInfo: createKeyboardMoveObservable.__docgenInfo, name: \"createKeyboardMoveObservable\", path: \"src/observables/keyboardMove.ts#createKeyboardMoveObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { fromEvent, Observable } from 'rxjs';\nimport {\n    distinctUntilChanged,\n    filter,\n    map,\n    switchMap,\n    withLatestFrom,\n} from 'rxjs/operators';\n\nimport { Matrix } from 'transformation-matrix';\nimport {\n    AngleAndDistanceNumbers,\n    OffsetAndSize,\n    OffsetAndSizeNumbers,\n    SizeNumbers,\n} from '../types';\nimport {\n    offsetAndSizeOfElement,\n    rotationOfElement,\n    scaleOfElement,\n    transformationMatrixOfElement,\n    visualCorners,\n} from '../utils/dom';\nimport {\n    angleBetweenPoints,\n    distanceBetweenPoints,\n    getSnapValues,\n    round,\n    snapPositionValues,\n} from '../utils/misc';\nimport {\n    documentMouseMove$,\n    documentMouseUp$,\n    requestAnimationFramesUntil,\n    shiftIsPressed$,\n} from './misc';\n\ninterface ResizeObservableOptions {\n    element: HTMLElement;\n    handle: HTMLElement;\n    onComplete?: () => void;\n    top?: boolean;\n    right?: boolean;\n    bottom?: boolean;\n    left?: boolean;\n    shouldConvertToPercent?: boolean;\n    snapTo?: number;\n    snapXTo?: number;\n    snapYTo?: number;\n}\n\n/*\n * Create an Obvservable that enables resizing an HTML element\n * and emits a stream of updated size.\n *\n * @param element HTML Element for which to enable resizing\n * @param handle HTML Element of the movable handle\n */\nexport const createResizeObservable = ({\n    element,\n    handle,\n    onComplete,\n    shouldConvertToPercent = true,\n    snapTo,\n    snapXTo,\n    snapYTo,\n    top,\n    right,\n    bottom,\n    left,\n}: ResizeObservableOptions): Observable<OffsetAndSize> => {\n    const mouseDown$ = fromEvent<MouseEvent>(handle, 'mousedown');\n\n    return mouseDown$.pipe(\n        filter((e: MouseEvent) => e.which === 1), // left clicks only\n        switchMap((e: MouseEvent) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const oldOffsetAndSize = offsetAndSizeOfElement(element);\n            const oldRotation = rotationOfElement(element);\n            const transformationMatrix = transformationMatrixOfElement(element);\n            const scale = scaleOfElement(element);\n\n            const snapValues = getSnapValues(snapTo, snapXTo, snapYTo);\n\n            const move$ = documentMouseMove$.pipe(\n                map(\n                    angleAndDistanceFromPointToMouseEvent(\n                        e.clientX,\n                        e.clientY,\n                        scale\n                    )\n                ),\n                map(horizontalAndVerticalChange(oldRotation)),\n                map(\n                    applyToOriginalSize(\n                        oldOffsetAndSize,\n                        top,\n                        right,\n                        bottom,\n                        left\n                    )\n                ),\n                map(limitToTwentyPxMinimum),\n                map(snapPositionValues(snapValues)),\n                distinctUntilChanged(),\n                withLatestFrom(shiftIsPressed$),\n                map(\n                    lockAspectRatio(\n                        oldOffsetAndSize.width / oldOffsetAndSize.height\n                    )\n                ),\n                map(\n                    offsetForVisualConsistency(\n                        oldOffsetAndSize,\n                        transformationMatrix,\n                        top,\n                        right,\n                        bottom,\n                        left\n                    )\n                ),\n                map(\n                    convertSizeToPercent(\n                        shouldConvertToPercent,\n                        element.parentElement!\n                    )\n                )\n            );\n\n            return requestAnimationFramesUntil(\n                move$,\n                documentMouseUp$,\n                onComplete\n            );\n        })\n    );\n};\n\n/**\n * Calculates the distance from an origin point to a mouse event\n */\nconst angleAndDistanceFromPointToMouseEvent = (\n    originX: number,\n    originY: number,\n    scale: number\n) => (e: MouseEvent): AngleAndDistanceNumbers => ({\n    angle: angleBetweenPoints(originX, originY)(e.clientX, e.clientY),\n    distance:\n        distanceBetweenPoints(originX, originY)(e.clientX, e.clientY) / scale,\n});\n\n/**\n * Translate angle and distance change of handle to change in x and y\n * (taking old rotation of the element into account).\n */\nconst horizontalAndVerticalChange = (oldRotation: number) => (\n    angleAndDistanceChange: AngleAndDistanceNumbers\n): SizeNumbers => {\n    const angleRadians =\n        ((angleAndDistanceChange.angle - oldRotation) * Math.PI) / 180;\n\n    return {\n        width: angleAndDistanceChange.distance * Math.cos(angleRadians),\n        height: angleAndDistanceChange.distance * Math.sin(angleRadians),\n    };\n};\n\n/**\n * Apply horizontal and vertical change to old element's Size.\n */\nconst applyToOriginalSize = (\n    oldOffsetAndSize: OffsetAndSizeNumbers,\n    top: boolean | undefined,\n    right: boolean | undefined,\n    bottom: boolean | undefined,\n    left: boolean | undefined\n) => (change: SizeNumbers): OffsetAndSizeNumbers => {\n    const positionLeft = left\n        ? oldOffsetAndSize.left + change.width\n        : oldOffsetAndSize.left;\n\n    const positionTop = top\n        ? oldOffsetAndSize.top + change.height\n        : oldOffsetAndSize.top;\n\n    const positionWidth = left\n        ? oldOffsetAndSize.width - change.width\n        : right\n        ? oldOffsetAndSize.width + change.width\n        : oldOffsetAndSize.width;\n\n    const positionHeight = top\n        ? oldOffsetAndSize.height - change.height\n        : bottom\n        ? oldOffsetAndSize.height + change.height\n        : oldOffsetAndSize.height;\n\n    return {\n        left: positionLeft,\n        top: positionTop,\n        width: positionWidth,\n        height: positionHeight,\n    };\n};\n\n/**\n * Limit the Size to a twenty pixel minimum height and width.\n */\nconst limitToTwentyPxMinimum = (\n    position: OffsetAndSizeNumbers\n): OffsetAndSizeNumbers => ({\n    ...position,\n    height: Math.max(20, position.height),\n    width: Math.max(20, position.width),\n});\n\n/**\n * If `shouldLock` is `true`, the new Size\n * will be forced into the provided aspect ratio.\n */\nconst lockAspectRatio = (aspectRatio: number) => ([position, shouldLock]: [\n    OffsetAndSizeNumbers,\n    boolean\n]): OffsetAndSizeNumbers => {\n    if (!shouldLock) {\n        return position;\n    }\n\n    if (position.width / position.height > aspectRatio) {\n        return {\n            ...position,\n            height: position.width / aspectRatio,\n        };\n    }\n\n    if (position.width / position.height < aspectRatio) {\n        return {\n            ...position,\n            width: position.height * aspectRatio,\n        };\n    }\n\n    return position;\n};\n\n/**\n * Fudge the left and top in order to keep\n * the perceived visual position the same.\n */\nconst offsetForVisualConsistency = (\n    oldOffsetAndSize: OffsetAndSizeNumbers,\n    transformationMatrix: Matrix,\n    top?: boolean,\n    right?: boolean,\n    bottom?: boolean,\n    left?: boolean\n) => (newOffsetAndSize: OffsetAndSizeNumbers): OffsetAndSizeNumbers => {\n    const oldCorners = visualCorners(oldOffsetAndSize, transformationMatrix);\n    const newCorners = visualCorners(newOffsetAndSize, transformationMatrix);\n\n    let changeX: number;\n    let changeY: number;\n\n    if (bottom && left) {\n        changeX = newCorners.ne.x - oldCorners.ne.x;\n        changeY = newCorners.ne.y - oldCorners.ne.y;\n    } else if (top && right) {\n        changeX = newCorners.sw.x - oldCorners.sw.x;\n        changeY = newCorners.sw.y - oldCorners.sw.y;\n    } else if (top || left) {\n        changeX = newCorners.se.x - oldCorners.se.x;\n        changeY = newCorners.se.y - oldCorners.se.y;\n    } else {\n        changeX = newCorners.nw.x - oldCorners.nw.x;\n        changeY = newCorners.nw.y - oldCorners.nw.y;\n    }\n\n    return {\n        left: newOffsetAndSize.left - changeX,\n        top: newOffsetAndSize.top - changeY,\n        width: newOffsetAndSize.width,\n        height: newOffsetAndSize.height,\n    };\n};\n\n/**\n * Convert pixel Size to a percentage of the parent's Size.\n */\nconst convertSizeToPercent = (\n    shouldConvertToPercent: boolean,\n    parent: HTMLElement\n) => (position: OffsetAndSizeNumbers): OffsetAndSize =>\n    shouldConvertToPercent\n        ? {\n              left: `${round((position.left / parent.offsetWidth) * 100)}%`,\n              top: `${round((position.top / parent.offsetHeight) * 100)}%`,\n              height: `${round(\n                  (position.height / parent.offsetHeight) * 100\n              )}%`,\n              width: `${round((position.width / parent.offsetWidth) * 100)}%`,\n          }\n        : {\n              left: `${round(position.left)}px`,\n              top: `${round(position.top)}px`,\n              height: `${round(position.height)}px`,\n              width: `${round(position.width)}px`,\n          };\ntry {\n    // @ts-ignore\n    createResizeObservable.displayName = \"createResizeObservable\";\n    // @ts-ignore\n    createResizeObservable.__docgenInfo = { \"description\": \"\", \"displayName\": \"createResizeObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"handle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"handle\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"top\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"top\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"right\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"right\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"bottom\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"bottom\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"left\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"left\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"shouldConvertToPercent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shouldConvertToPercent\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"snapTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapXTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapXTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapYTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapYTo\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/resize.ts#createResizeObservable\"] = { docgenInfo: createResizeObservable.__docgenInfo, name: \"createResizeObservable\", path: \"src/observables/resize.ts#createResizeObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { fromEvent, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\nimport { RotationNumber } from '../types';\nimport { rotationOfElement } from '../utils/dom';\nimport { angleBetweenPoints, round } from '../utils/misc';\nimport {\n    documentMouseMove$,\n    documentMouseUp$,\n    requestAnimationFramesUntil,\n} from './misc';\n\ninterface RotateObservableOptions {\n    element: HTMLElement;\n    handle: HTMLElement;\n    onComplete: () => void;\n}\n\n/**\n * Create an Obvservable that enables rotating an HTML element\n * and emits a stream of updated rotation.\n *\n * @param element HTML Element for which to enable rotation.\n * @param handle HTML Element of the movable handle\n */\nexport const createRotateObservable = ({\n    element,\n    handle,\n    onComplete,\n}: RotateObservableOptions): Observable<RotationNumber> => {\n    const mouseDown$ = fromEvent<MouseEvent>(handle, 'mousedown');\n\n    return mouseDown$.pipe(\n        filter((e: MouseEvent) => e.which === 1), // left clicks only\n        switchMap((e: MouseEvent) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            // Use the center of the Element as a rotation point\n            const position = element.getBoundingClientRect();\n            const axisX = (element.offsetWidth + position.left * 2) / 2;\n            const axisY = (element.offsetHeight + position.top * 2) / 2;\n\n            // Create a function that calculates the angle of a\n            // line starting at the center of the Element\n            const angleFromAxis = angleBetweenPoints(axisX, axisY);\n\n            const currentRotation = rotationOfElement(element);\n            const initialAngle =\n                angleFromAxis(e.clientX, e.clientY) - currentRotation;\n\n            const rotate$ = documentMouseMove$.pipe(\n                map(translateRotation(angleFromAxis, initialAngle))\n            );\n\n            return requestAnimationFramesUntil(\n                rotate$,\n                documentMouseUp$,\n                onComplete\n            );\n        })\n    );\n};\n\n/**\n * A function that calculates the angle from a non-exposed point\n * to the point provided as parameters when calling the function.\n */\ntype AngleFromPointCalculator = (x: number, y: number) => number;\n\n/**\n * Calculate the final rotation based on the mouse's angle from\n * the center axis and original rotation of the html element.\n */\nconst translateRotation = (\n    angleCalculator: AngleFromPointCalculator,\n    initialAngle: number\n) => (e: MouseEvent): RotationNumber => {\n    const interval = e.shiftKey ? 15 : 0.1;\n\n    const angle = round(\n        angleCalculator(e.clientX, e.clientY) - initialAngle,\n        interval\n    );\n\n    return {\n        rotation: `${angle}deg`,\n    };\n};\ntry {\n    // @ts-ignore\n    createRotateObservable.displayName = \"createRotateObservable\";\n    // @ts-ignore\n    createRotateObservable.__docgenInfo = { \"description\": \"Create an Obvservable that enables rotating an HTML element\\nand emits a stream of updated rotation.\\n@param element HTML Element for which to enable rotation.\\n@param handle HTML Element of the movable handle\", \"displayName\": \"createRotateObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"handle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"handle\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": true, \"type\": { \"name\": \"() => void\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/rotate.ts#createRotateObservable\"] = { docgenInfo: createRotateObservable.__docgenInfo, name: \"createRotateObservable\", path: \"src/observables/rotate.ts#createRotateObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export * from './allMove';\nexport * from './dnd';\nexport * from './keyboardMove';\nexport * from './resize';\nexport * from './rotate';\ntry {\n    // @ts-ignore\n    createAllMoveObservable.displayName = \"createAllMoveObservable\";\n    // @ts-ignore\n    createAllMoveObservable.__docgenInfo = { \"description\": \"\", \"displayName\": \"createAllMoveObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"group\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"group\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"shouldConvertToPercent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shouldConvertToPercent\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/index.ts#createAllMoveObservable\"] = { docgenInfo: createAllMoveObservable.__docgenInfo, name: \"createAllMoveObservable\", path: \"src/observables/index.ts#createAllMoveObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    createDndObservable.displayName = \"createDndObservable\";\n    // @ts-ignore\n    createDndObservable.__docgenInfo = { \"description\": \"Create an Obvservable that enables dragging an Element\\nand emits a stream of updated positions.\", \"displayName\": \"createDndObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"group\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"group\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"handle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"handle\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"snapTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapXTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapXTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapYTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapYTo\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/index.ts#createDndObservable\"] = { docgenInfo: createDndObservable.__docgenInfo, name: \"createDndObservable\", path: \"src/observables/index.ts#createDndObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    createKeyboardMoveObservable.displayName = \"createKeyboardMoveObservable\";\n    // @ts-ignore\n    createKeyboardMoveObservable.__docgenInfo = { \"description\": \"Create an Observable that enables drag-and-drop\\nand emits a stream of updated positions.\", \"displayName\": \"createKeyboardMoveObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"shouldConvertToPercent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shouldConvertToPercent\", \"required\": true, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/index.ts#createKeyboardMoveObservable\"] = { docgenInfo: createKeyboardMoveObservable.__docgenInfo, name: \"createKeyboardMoveObservable\", path: \"src/observables/index.ts#createKeyboardMoveObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    createResizeObservable.displayName = \"createResizeObservable\";\n    // @ts-ignore\n    createResizeObservable.__docgenInfo = { \"description\": \"\", \"displayName\": \"createResizeObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"handle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"handle\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"top\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"top\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"right\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"right\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"bottom\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"bottom\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"left\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"left\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"shouldConvertToPercent\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shouldConvertToPercent\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"snapTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapXTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapXTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapYTo\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"snapYTo\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/index.ts#createResizeObservable\"] = { docgenInfo: createResizeObservable.__docgenInfo, name: \"createResizeObservable\", path: \"src/observables/index.ts#createResizeObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    createRotateObservable.displayName = \"createRotateObservable\";\n    // @ts-ignore\n    createRotateObservable.__docgenInfo = { \"description\": \"Create an Obvservable that enables rotating an HTML element\\nand emits a stream of updated rotation.\\n@param element HTML Element for which to enable rotation.\\n@param handle HTML Element of the movable handle\", \"displayName\": \"createRotateObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"handle\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"handle\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } }, \"onComplete\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onComplete\", \"required\": true, \"type\": { \"name\": \"() => void\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/index.ts#createRotateObservable\"] = { docgenInfo: createRotateObservable.__docgenInfo, name: \"createRotateObservable\", path: \"src/observables/index.ts#createRotateObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { fromEvent, Observable } from 'rxjs';\nimport {\n    concatMap,\n    elementAt,\n    first,\n    mapTo,\n    takeUntil,\n    tap,\n} from 'rxjs/operators';\nimport { documentMouseMove$, documentMouseUp$ } from './misc';\n\ninterface ClickObservableOptions {\n    // HTML element used as a basis for all calculations.\n    element: HTMLElement;\n}\n\n/**\n * Create a click event listener for an element. Because actual click events\n * may be problematic for our other observables, this observable is based off\n * of `mousedown`, `mousemove`, and `mouseup` events. Therefore, the emitted\n * value is the element's `mousedown` event, not a `click` event.\n */\nexport const createClickObservable = ({\n    element,\n}: ClickObservableOptions): Observable<MouseEvent> => {\n    const mouseDown$ = fromEvent<MouseEvent>(element, 'mousedown');\n\n    return mouseDown$.pipe(\n        concatMap(mouseDownEvent =>\n            documentMouseUp$.pipe(\n                first(),\n                takeUntil(documentMouseMove$.pipe(elementAt(3))),\n                tap(e => {\n                    e.stopPropagation();\n                    e.preventDefault();\n                }),\n                mapTo(mouseDownEvent)\n            )\n        )\n    );\n};\ntry {\n    // @ts-ignore\n    createClickObservable.displayName = \"createClickObservable\";\n    // @ts-ignore\n    createClickObservable.__docgenInfo = { \"description\": \"Create a click event listener for an element. Because actual click events\\nmay be problematic for our other observables, this observable is based off\\nof `mousedown`, `mousemove`, and `mouseup` events. Therefore, the emitted\\nvalue is the element's `mousedown` event, not a `click` event.\", \"displayName\": \"createClickObservable\", \"props\": { \"element\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"element\", \"required\": true, \"type\": { \"name\": \"HTMLElement\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/observables/click.ts#createClickObservable\"] = { docgenInfo: createClickObservable.__docgenInfo, name: \"createClickObservable\", path: \"src/observables/click.ts#createClickObservable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n    createAllMoveObservable,\n    createDndObservable,\n    createKeyboardMoveObservable,\n    createResizeObservable,\n    createRotateObservable,\n} from './observables';\nimport { createClickObservable } from './observables/click';\nimport { Position } from './types';\nimport {\n    calculateResizeObservableConfigs,\n    calculateRotateObservableConfigs,\n    isFunction,\n    objectsAreEqual,\n    randomString,\n} from './utils/misc';\n\ntype PositionableState = Position;\n\nexport interface PositionableProps {\n    /**\n     * Should all functionality be disabled? This property takes\n     * precedence over `movable`, `resizable`, and `rotatable`.\n     */\n    disabled?: boolean;\n\n    /**\n     * By default, if `movable` is `true`, both mouse and keyboard movement\n     * are enabled. This prop allows keyboard-based movement to be disabled.\n     */\n    disableKeyboardMovement?: boolean;\n\n    /**\n     * Members of the same group will respond\n     * to each other's drag and drop events.\n     */\n    group?: string;\n\n    /** Should moving be enabled? */\n    movable?: boolean;\n\n    /**\n     * Click event handler. If a `dnd` ref exists, it will used to track\n     * the click events. Otherwise, the `container` ref will be used. This\n     * is a native DOM event, not a React synthetic event.\n     */\n    onClick?: (e: MouseEvent) => void;\n\n    /** Callback to notify when Positioning has changed */\n    onUpdate?: (sizing: Position) => void;\n\n    /** Current Positioning (left, top, width, height, rotation) */\n    position: Position;\n\n    /** Render Prop alternative to using `children` */\n    render?: RenderCallback;\n\n    /** Should resizing be enabled? */\n    resizable?: boolean;\n\n    /** Should rotation be enabled? */\n    rotatable?: boolean;\n\n    /** Snap drag and resize to pixels of this interval. */\n    snapTo?: number;\n\n    /**\n     * Snap horizontal drag and resize to pixels of this interval\n     * (overwrites snapTo for horizontal values). Setting this value\n     * to `0` disables horizontal changes.\n     */\n    snapXTo?: number;\n\n    /**\n     * Snap vertical drag and resize to pixels of this interval\n     * (overwrites snapTo for vertical values). Setting this value\n     * to `0` disables vertical changes.\n     */\n    snapYTo?: number;\n}\n\ntype RenderCallback = (args: RenderCallbackArgs) => JSX.Element;\n\nexport interface RenderCallbackArgs {\n    renderedPosition: Position;\n    refHandlers: Positionable['refHandlers'];\n}\n\nexport class Positionable extends React.Component<\n    PositionableProps,\n    PositionableState\n> {\n    public static defaultProps = {\n        resizable: [],\n    };\n\n    public readonly state: PositionableState;\n\n    private refHandlers = {\n        container: React.createRef<HTMLElement>(),\n\n        dnd: React.createRef<HTMLElement>(),\n\n        neRotate: React.createRef<HTMLElement>(),\n        seRotate: React.createRef<HTMLElement>(),\n        swRotate: React.createRef<HTMLElement>(),\n        nwRotate: React.createRef<HTMLElement>(),\n\n        nResize: React.createRef<HTMLElement>(),\n        neResize: React.createRef<HTMLElement>(),\n        eResize: React.createRef<HTMLElement>(),\n        seResize: React.createRef<HTMLElement>(),\n        sResize: React.createRef<HTMLElement>(),\n        swResize: React.createRef<HTMLElement>(),\n        wResize: React.createRef<HTMLElement>(),\n        nwResize: React.createRef<HTMLElement>(),\n    };\n\n    private destroy$ = new Subject<void>();\n\n    constructor(props: PositionableProps) {\n        super(props);\n        this.state = { ...props.position };\n    }\n\n    public componentDidMount() {\n        this.buildSubscriptions();\n    }\n\n    public componentWillUnmount() {\n        this.destroy$.next();\n    }\n\n    /**\n     * Update subscriptions and internal Position if the props change.\n     */\n    public componentDidUpdate(prevProps: PositionableProps) {\n        if (objectsAreEqual(this.props, prevProps)) {\n            return;\n        }\n\n        const { position, ...rest } = this.props;\n        const { position: prevPosition, ...prevRest } = prevProps;\n\n        if (!objectsAreEqual(position, prevPosition)) {\n            this.setState(this.props.position);\n        }\n\n        if (!objectsAreEqual(rest, prevRest)) {\n            this.buildSubscriptions();\n        }\n    }\n\n    public render() {\n        const { children, render } = this.props;\n\n        const passedProps: RenderCallbackArgs = {\n            renderedPosition: this.state,\n            refHandlers: this.refHandlers,\n        };\n\n        if (isFunction(render)) {\n            return render(passedProps);\n        }\n\n        if (isFunction(children)) {\n            return children(passedProps);\n        }\n\n        throw new Error(\n            'Positionable must receive `render` or `children` as render callback'\n        );\n    }\n\n    /**\n     * Call `onUpdate()` prop if position has changed.\n     */\n    private handleUpdate = () => {\n        if (\n            !this.props.onUpdate ||\n            objectsAreEqual(this.state, this.props.position)\n        ) {\n            return;\n        }\n\n        this.props.onUpdate(this.state);\n    };\n\n    /**\n     * Handle subscribing to and unsubscribing from Observables.\n     */\n    private buildSubscriptions() {\n        const {\n            disabled,\n            disableKeyboardMovement,\n            movable,\n            onClick,\n            resizable,\n            rotatable,\n            snapTo,\n            snapXTo,\n            snapYTo,\n        } = this.props;\n        const { left, width } = this.state;\n        const group = this.props.group || randomString();\n\n        this.destroy$.next();\n\n        // We need, at the bare minimum, a `container` ref.\n        if (!this.refHandlers.container.current) {\n            return;\n        }\n\n        if (onClick) {\n            createClickObservable({\n                element:\n                    this.refHandlers.dnd.current ||\n                    this.refHandlers.container.current,\n            })\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(onClick);\n        }\n\n        // If `disabled`, only the click observable will be created.\n        if (disabled) {\n            return;\n        }\n\n        if (movable) {\n            createDndObservable({\n                element: this.refHandlers.container.current,\n                group,\n                handle:\n                    this.refHandlers.dnd.current ||\n                    this.refHandlers.container.current,\n                snapTo,\n                snapXTo,\n                snapYTo,\n            })\n                .pipe(takeUntil(this.destroy$))\n                .subscribe();\n\n            createAllMoveObservable({\n                element: this.refHandlers.container.current,\n                group,\n                onComplete: this.handleUpdate,\n                shouldConvertToPercent: left.includes('%'),\n            })\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(newCoords => this.setState(newCoords));\n\n            if (!disableKeyboardMovement) {\n                createKeyboardMoveObservable({\n                    element: this.refHandlers.container.current,\n                    onComplete: this.handleUpdate,\n                    shouldConvertToPercent: left.includes('%'),\n                })\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(newCoords => this.setState(newCoords));\n            }\n        }\n\n        if (resizable) {\n            const resizeObservableConfigs = calculateResizeObservableConfigs();\n\n            resizeObservableConfigs.forEach(config => {\n                const handle = this.refHandlers[config.refHandlerName].current;\n\n                if (!handle) {\n                    return;\n                }\n\n                createResizeObservable({\n                    element: this.refHandlers.container.current!,\n                    handle,\n                    onComplete: this.handleUpdate,\n                    top: config.top,\n                    right: config.right,\n                    bottom: config.bottom,\n                    left: config.left,\n                    shouldConvertToPercent: width.includes('%'),\n                    snapTo,\n                    snapXTo,\n                    snapYTo,\n                })\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(newPosition => this.setState(newPosition));\n            });\n        }\n\n        if (rotatable) {\n            const rotateObservableConfigs = calculateRotateObservableConfigs();\n\n            rotateObservableConfigs.forEach(config => {\n                const handle = this.refHandlers[config.refHandlerName].current;\n\n                if (!handle) {\n                    return;\n                }\n\n                createRotateObservable({\n                    element: this.refHandlers.container.current!,\n                    handle,\n                    onComplete: this.handleUpdate,\n                })\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(newRotation => this.setState(newRotation));\n            });\n        }\n    }\n}\n\nexport default Positionable;\ntry {\n    // @ts-ignore\n    Positionable.displayName = \"Positionable\";\n    // @ts-ignore\n    Positionable.__docgenInfo = { \"description\": \"\", \"displayName\": \"Positionable\", \"props\": { \"disabled\": { \"defaultValue\": null, \"description\": \"Should all functionality be disabled? This property takes\\nprecedence over `movable`, `resizable`, and `rotatable`.\", \"name\": \"disabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"disableKeyboardMovement\": { \"defaultValue\": null, \"description\": \"By default, if `movable` is `true`, both mouse and keyboard movement\\nare enabled. This prop allows keyboard-based movement to be disabled.\", \"name\": \"disableKeyboardMovement\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"group\": { \"defaultValue\": null, \"description\": \"Members of the same group will respond\\nto each other's drag and drop events.\", \"name\": \"group\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"movable\": { \"defaultValue\": null, \"description\": \"Should moving be enabled?\", \"name\": \"movable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onClick\": { \"defaultValue\": null, \"description\": \"Click event handler. If a `dnd` ref exists, it will used to track\\nthe click events. Otherwise, the `container` ref will be used. This\\nis a native DOM event, not a React synthetic event.\", \"name\": \"onClick\", \"required\": false, \"type\": { \"name\": \"(e: MouseEvent) => void\" } }, \"onUpdate\": { \"defaultValue\": null, \"description\": \"Callback to notify when Positioning has changed\", \"name\": \"onUpdate\", \"required\": false, \"type\": { \"name\": \"(sizing: AsStrings<PositionNumbers>) => void\" } }, \"position\": { \"defaultValue\": null, \"description\": \"Current Positioning (left, top, width, height, rotation)\", \"name\": \"position\", \"required\": true, \"type\": { \"name\": \"AsStrings<PositionNumbers>\" } }, \"render\": { \"defaultValue\": null, \"description\": \"Render Prop alternative to using `children`\", \"name\": \"render\", \"required\": false, \"type\": { \"name\": \"RenderCallback\" } }, \"resizable\": { \"defaultValue\": null, \"description\": \"Should resizing be enabled?\", \"name\": \"resizable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"rotatable\": { \"defaultValue\": null, \"description\": \"Should rotation be enabled?\", \"name\": \"rotatable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"snapTo\": { \"defaultValue\": null, \"description\": \"Snap drag and resize to pixels of this interval.\", \"name\": \"snapTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapXTo\": { \"defaultValue\": null, \"description\": \"Snap horizontal drag and resize to pixels of this interval\\n(overwrites snapTo for horizontal values). Setting this value\\nto `0` disables horizontal changes.\", \"name\": \"snapXTo\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapYTo\": { \"defaultValue\": null, \"description\": \"Snap vertical drag and resize to pixels of this interval\\n(overwrites snapTo for vertical values). Setting this value\\nto `0` disables vertical changes.\", \"name\": \"snapYTo\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/Positionable.tsx#Positionable\"] = { docgenInfo: Positionable.__docgenInfo, name: \"Positionable\", path: \"src/Positionable.tsx#Positionable\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}